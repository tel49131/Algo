class Node:
        def __init__(self,dataval=0):
                self.dataval = 0
                self.nextval = None
                
class MyLinkedList:   
        def _init_(self):
            self.val = None
            self.next = None

        def get(self, index):
            p = self.val
            if p == None :
                return -1
            else:
                i = 1
                while i <= index:
                    p = p.next
                    i += 1
                return p.val
        

        def addAtHead(self, newdata):
             NewNode = Node(newdata)
            
        

        def addAtTail(self, val):
            NewNode = Node(val)
            if self.val  == None:
                self.val = NewNode
            return
            laste = self.val
            while(laste.nextval):
                laste = laste.nextval
            laste.nextval=NewNode
        

        def addAtIndex(self, middle_node,newdata):
            if not middle_node:
                print("The mentioned node is absent")
            return
            NewNode = Node()
            NewNode.nextval = middle_node.nextval
            middle_node.nextval = NewNode


        def deleteAtIndex(self, removekey):
            HeadVal = self.head
            if not HeadVal:
                if (HeadVal.data == Removekey):
                    self.head = HeadVal.next
                    HeadVal = None
                    return
            while not HeadVal:
                if HeadVal.data == Removekey:
                    break
                prev = HeadVal
                HeadVal = HeadVal.next

            if (HeadVal == None):
                return

            prev.next = HeadVal.next

            HeadVal = None
